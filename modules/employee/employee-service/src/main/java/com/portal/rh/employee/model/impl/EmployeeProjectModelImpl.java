/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.portal.rh.employee.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.portal.rh.employee.model.EmployeeProject;
import com.portal.rh.employee.model.EmployeeProjectModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the EmployeeProject service. Represents a row in the &quot;RH_EmployeeProject&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EmployeeProjectModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeProjectImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmployeeProjectImpl
 * @generated
 */
@JSON(strict = true)
public class EmployeeProjectModelImpl
	extends BaseModelImpl<EmployeeProject> implements EmployeeProjectModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employee project model instance should use the <code>EmployeeProject</code> interface instead.
	 */
	public static final String TABLE_NAME = "RH_EmployeeProject";

	public static final Object[][] TABLE_COLUMNS = {
		{"employeeProjectId", Types.BIGINT}, {"employeeId", Types.BIGINT},
		{"projectId", Types.BIGINT}, {"allocatedHours", Types.INTEGER},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("employeeProjectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("projectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("allocatedHours", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table RH_EmployeeProject (employeeProjectId LONG not null primary key,employeeId LONG,projectId LONG,allocatedHours INTEGER,groupId LONG,companyId LONG)";

	public static final String TABLE_SQL_DROP = "drop table RH_EmployeeProject";

	public static final String ORDER_BY_JPQL =
		" ORDER BY employeeProject.employeeProjectId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY RH_EmployeeProject.employeeProjectId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EMPLOYEEPROJECTID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public EmployeeProjectModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _employeeProjectId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmployeeProjectId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _employeeProjectId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmployeeProject.class;
	}

	@Override
	public String getModelClassName() {
		return EmployeeProject.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<EmployeeProject, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<EmployeeProject, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmployeeProject, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((EmployeeProject)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<EmployeeProject, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<EmployeeProject, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(EmployeeProject)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<EmployeeProject, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<EmployeeProject, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<EmployeeProject, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<EmployeeProject, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<EmployeeProject, Object>>();

			attributeGetterFunctions.put(
				"employeeProjectId", EmployeeProject::getEmployeeProjectId);
			attributeGetterFunctions.put(
				"employeeId", EmployeeProject::getEmployeeId);
			attributeGetterFunctions.put(
				"projectId", EmployeeProject::getProjectId);
			attributeGetterFunctions.put(
				"allocatedHours", EmployeeProject::getAllocatedHours);
			attributeGetterFunctions.put(
				"groupId", EmployeeProject::getGroupId);
			attributeGetterFunctions.put(
				"companyId", EmployeeProject::getCompanyId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<EmployeeProject, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<EmployeeProject, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<EmployeeProject, ?>>();

			attributeSetterBiConsumers.put(
				"employeeProjectId",
				(BiConsumer<EmployeeProject, Long>)
					EmployeeProject::setEmployeeProjectId);
			attributeSetterBiConsumers.put(
				"employeeId",
				(BiConsumer<EmployeeProject, Long>)
					EmployeeProject::setEmployeeId);
			attributeSetterBiConsumers.put(
				"projectId",
				(BiConsumer<EmployeeProject, Long>)
					EmployeeProject::setProjectId);
			attributeSetterBiConsumers.put(
				"allocatedHours",
				(BiConsumer<EmployeeProject, Integer>)
					EmployeeProject::setAllocatedHours);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<EmployeeProject, Long>)EmployeeProject::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<EmployeeProject, Long>)
					EmployeeProject::setCompanyId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getEmployeeProjectId() {
		return _employeeProjectId;
	}

	@Override
	public void setEmployeeProjectId(long employeeProjectId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeProjectId = employeeProjectId;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeId = employeeId;
	}

	@JSON
	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_projectId = projectId;
	}

	@JSON
	@Override
	public int getAllocatedHours() {
		return _allocatedHours;
	}

	@Override
	public void setAllocatedHours(int allocatedHours) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_allocatedHours = allocatedHours;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), EmployeeProject.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmployeeProject toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, EmployeeProject>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmployeeProjectImpl employeeProjectImpl = new EmployeeProjectImpl();

		employeeProjectImpl.setEmployeeProjectId(getEmployeeProjectId());
		employeeProjectImpl.setEmployeeId(getEmployeeId());
		employeeProjectImpl.setProjectId(getProjectId());
		employeeProjectImpl.setAllocatedHours(getAllocatedHours());
		employeeProjectImpl.setGroupId(getGroupId());
		employeeProjectImpl.setCompanyId(getCompanyId());

		employeeProjectImpl.resetOriginalValues();

		return employeeProjectImpl;
	}

	@Override
	public EmployeeProject cloneWithOriginalValues() {
		EmployeeProjectImpl employeeProjectImpl = new EmployeeProjectImpl();

		employeeProjectImpl.setEmployeeProjectId(
			this.<Long>getColumnOriginalValue("employeeProjectId"));
		employeeProjectImpl.setEmployeeId(
			this.<Long>getColumnOriginalValue("employeeId"));
		employeeProjectImpl.setProjectId(
			this.<Long>getColumnOriginalValue("projectId"));
		employeeProjectImpl.setAllocatedHours(
			this.<Integer>getColumnOriginalValue("allocatedHours"));
		employeeProjectImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		employeeProjectImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));

		return employeeProjectImpl;
	}

	@Override
	public int compareTo(EmployeeProject employeeProject) {
		long primaryKey = employeeProject.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof EmployeeProject)) {
			return false;
		}

		EmployeeProject employeeProject = (EmployeeProject)object;

		long primaryKey = employeeProject.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<EmployeeProject> toCacheModel() {
		EmployeeProjectCacheModel employeeProjectCacheModel =
			new EmployeeProjectCacheModel();

		employeeProjectCacheModel.employeeProjectId = getEmployeeProjectId();

		employeeProjectCacheModel.employeeId = getEmployeeId();

		employeeProjectCacheModel.projectId = getProjectId();

		employeeProjectCacheModel.allocatedHours = getAllocatedHours();

		employeeProjectCacheModel.groupId = getGroupId();

		employeeProjectCacheModel.companyId = getCompanyId();

		return employeeProjectCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<EmployeeProject, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<EmployeeProject, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmployeeProject, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((EmployeeProject)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, EmployeeProject>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					EmployeeProject.class, ModelWrapper.class);

	}

	private long _employeeProjectId;
	private long _employeeId;
	private long _projectId;
	private int _allocatedHours;
	private long _groupId;
	private long _companyId;

	public <T> T getColumnValue(String columnName) {
		Function<EmployeeProject, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((EmployeeProject)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("employeeProjectId", _employeeProjectId);
		_columnOriginalValues.put("employeeId", _employeeId);
		_columnOriginalValues.put("projectId", _projectId);
		_columnOriginalValues.put("allocatedHours", _allocatedHours);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("employeeProjectId", 1L);

		columnBitmasks.put("employeeId", 2L);

		columnBitmasks.put("projectId", 4L);

		columnBitmasks.put("allocatedHours", 8L);

		columnBitmasks.put("groupId", 16L);

		columnBitmasks.put("companyId", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private EmployeeProject _escapedModel;

}